plugins {
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "org.asciidoctor.convert" version "1.5.3"  // (1)


    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10' // Querydsl(1)
}

group = 'com.chang.soloproject'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

ext {
    snippetsDir = file('build/generated-snippets')          // (2) 스니펫(snippet) : 문서 조각으로 생각하면 됩니다
}


/*bootRun {
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: 'local'
}*/

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-security')

    implementation('org.springdoc:springdoc-openapi-ui:1.5.2')

    implementation('com.querydsl:querydsl-jpa') // Querydsl(2)

    runtimeOnly('org.postgresql:postgresql')

    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')

    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testRuntimeOnly 'com.h2database:h2:1.4.197'
    // 쿼리 파라미터를 로그로 남기는 외부 라이브러리는 시스템 자원을 사용하므로, 개발 단계에서는
    //편하게 사용해도 된다. 하지만 운영시스템에 적용하려면 꼭 성능테스트를 하고 사용하는 것이 좋다.
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'

    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.2.RELEASE' // (4)
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.2.RELEASE' // (5)

    // 시큐리티 적용으로 인해 인증되지 않은 사용자의 요청을 이동시키기 위함입니다. 따라서 임의로 인증된 사용자를 추가하여 API를 테스트
    testCompile('org.springframework.security:spring-security-test')
}

test {
    outputs.dir snippetsDir // (6)
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir  // (7)
    dependsOn test          // (8) gradle build 시 test → asciidoctor 순으로 수행됩니다.
}


task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/asciidoc/html5/")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

// querydsl task
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}


